<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akring&#39;s Blog</title>
  
  <subtitle>Everything is permitted</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.akringblog.com/"/>
  <updated>2019-01-20T11:13:48.022Z</updated>
  <id>https://www.akringblog.com/</id>
  
  <author>
    <name>Akring</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter Card 中图片圆角显示</title>
    <link href="https://www.akringblog.com/2019/01/17/Flutter%20Card%20%E4%B8%AD%E5%9B%BE%E7%89%87%E5%9C%86%E8%A7%92%E6%98%BE%E7%A4%BA/"/>
    <id>https://www.akringblog.com/2019/01/17/Flutter Card 中图片圆角显示/</id>
    <published>2019-01-17T12:20:19.000Z</published>
    <updated>2019-01-20T11:13:48.022Z</updated>
    
    <content type="html"><![CDATA[<p>需在 <code>Card</code> 组件中显式申明：<code>clipBehavior: Clip.antiAlias,</code>，完整代码如下：</p><a id="more"></a><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CardItemState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CardItem</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> _clicked() &#123;&#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      <span class="comment">// height: 200,</span></span><br><span class="line">      child: <span class="keyword">new</span> Card(</span><br><span class="line">        clipBehavior: Clip.antiAlias,</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Image.asset(</span><br><span class="line">              <span class="string">"images/userBgImag.png"</span>,</span><br><span class="line">              <span class="comment">// fit: BoxFit.cover,</span></span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需在 &lt;code&gt;Card&lt;/code&gt; 组件中显式申明：&lt;code&gt;clipBehavior: Clip.antiAlias,&lt;/code&gt;，完整代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.akringblog.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.akringblog.com/2019/01/17/hello-world/"/>
    <id>https://www.akringblog.com/2019/01/17/hello-world/</id>
    <published>2019-01-17T02:58:09.950Z</published>
    <updated>2019-01-17T02:58:09.951Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS Moya 实现 OAuth 2.0 请求</title>
    <link href="https://www.akringblog.com/2019/01/08/iOS%20Moya%20%E5%AE%9E%E7%8E%B0%20OAuth%202.0%20%E8%AF%B7%E6%B1%82/"/>
    <id>https://www.akringblog.com/2019/01/08/iOS Moya 实现 OAuth 2.0 请求/</id>
    <published>2019-01-08T13:30:21.000Z</published>
    <updated>2019-01-20T11:14:01.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-起源"><a href="#0-起源" class="headerlink" title="0. 起源"></a>0. 起源</h2><p>开放授权（OAuth）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。<br><a id="more"></a><br>而作为第三方软件，为用户提供 OAuth 登录是更好的选择，可以有效打消用户对于个人账户密码泄露的顾虑，同时也能有效避免用户反复登录，进而增加用户的舒适度，提高用户粘性。</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><p>项目使用 MVVM 架构，引入了 Rx 全家桶，网络请求框架使用了 <a href="https://github.com/Moya/Moya" target="_blank" rel="noopener">Moya</a>，以及处理 Oauth 相关的库 <a href="https://github.com/p2/OAuth2" target="_blank" rel="noopener">OAuth2</a>。</p><h2 id="2-OAuth2-部分"><a href="#2-OAuth2-部分" class="headerlink" title="2. OAuth2 部分"></a>2. OAuth2 部分</h2><p>参阅 OAuth2 库的<a href="https://github.com/p2/OAuth2" target="_blank" rel="noopener">README</a>，完成 OAuth 的信息配置：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oauth2 = <span class="type">OAuth2CodeGrant</span>(settings: [</span><br><span class="line">    <span class="string">"client_id"</span>: <span class="string">"my_swift_app"</span>,</span><br><span class="line">    <span class="string">"client_secret"</span>: <span class="string">"C7447242"</span>,</span><br><span class="line">    <span class="string">"authorize_uri"</span>: <span class="string">"https://github.com/login/oauth/authorize"</span>,</span><br><span class="line">    <span class="string">"token_uri"</span>: <span class="string">"https://github.com/login/oauth/access_token"</span>,   <span class="comment">// code grant only</span></span><br><span class="line">    <span class="string">"redirect_uris"</span>: [<span class="string">"myapp://oauth/callback"</span>],   <span class="comment">// register your own "myapp" scheme in Info.plist</span></span><br><span class="line">    <span class="string">"scope"</span>: <span class="string">"user repo:status"</span>,</span><br><span class="line">    <span class="string">"secret_in_body"</span>: <span class="literal">true</span>,    <span class="comment">// Github needs this</span></span><br><span class="line">    <span class="string">"keychain"</span>: <span class="literal">false</span>,         <span class="comment">// if you DON'T want keychain integration</span></span><br><span class="line">] <span class="keyword">as</span> <span class="type">OAuth2JSON</span>)</span><br></pre></td></tr></table></figure></p><p>同时因为 Moya 的底层网络请求实现是基于 Alamofire，因此我们可以参照 OAuth2 提供的说明文档 <a href="https://github.com/p2/OAuth2/wiki/Alamofire-4" target="_blank" rel="noopener">Alamofire 4 · p2/OAuth2 Wiki · GitHub</a> 完成相关配置，关键代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> OAuth2</span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OAuth2RetryHandler</span>: <span class="title">RequestRetrier</span>, <span class="title">RequestAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> loader: <span class="type">OAuth2DataLoader</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(oauth2: <span class="type">OAuth2</span>) &#123;</span><br><span class="line">        loader = <span class="type">OAuth2DataLoader</span>(oauth2: oauth2)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Intercept 401 and do an OAuth2 authorization.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">should</span><span class="params">(<span class="number">_</span> manager: SessionManager, retry request: Request, with error: Error, completion: @escaping RequestRetryCompletion)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> response = request.task?.response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>, <span class="number">401</span> == response.statusCode, <span class="keyword">let</span> req = request.request &#123;</span><br><span class="line">            <span class="keyword">var</span> dataRequest = <span class="type">OAuth2DataRequest</span>(request: req, callback: &#123; <span class="number">_</span> <span class="keyword">in</span> &#125;)</span><br><span class="line">            dataRequest.context = completion</span><br><span class="line">            loader.enqueue(request: dataRequest)</span><br><span class="line">            loader.attemptToAuthorize() &#123; authParams, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.loader.dequeueAndApply() &#123; req <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> comp = req.context <span class="keyword">as</span>? <span class="type">RequestRetryCompletion</span> &#123;</span><br><span class="line">                        comp(<span class="literal">nil</span> != authParams, <span class="number">0.0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(<span class="literal">false</span>, <span class="number">0.0</span>)   <span class="comment">// not a 401, not our problem</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Sign the request with the access token.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">adapt</span><span class="params">(<span class="number">_</span> urlRequest: URLRequest)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="literal">nil</span> != loader.oauth2.accessToken <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> urlRequest</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> urlRequest.signed(with: loader.oauth2)   <span class="comment">// "try" added in 3.0.2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-Moya-部分"><a href="#3-Moya-部分" class="headerlink" title="3. Moya 部分"></a>3. Moya 部分</h2><p>Moya 的 provider 在初始化时可以传入 <code>SessionManager</code> ，因此参照文档，可以先使用 OAuth2 生成一个特定的 <code>SessionManager</code> ：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getManager</span><span class="params">()</span></span> -&gt; <span class="type">SessionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> oauth2 = <span class="type">OAuth2CodeGrant</span>(settings: [</span><br><span class="line">            <span class="string">"client_id"</span>: <span class="string">"my_swift_app"</span>,</span><br><span class="line">            <span class="string">"client_secret"</span>: <span class="string">"C7447242"</span>,</span><br><span class="line">            <span class="string">"authorize_uri"</span>: <span class="string">"https://github.com/login/oauth/authorize"</span>,</span><br><span class="line">            <span class="string">"token_uri"</span>: <span class="string">"https://github.com/login/oauth/access_token"</span>,   <span class="comment">// code grant only</span></span><br><span class="line">            <span class="string">"redirect_uris"</span>: [<span class="string">"myapp://oauth/callback"</span>],   <span class="comment">// register your own "myapp" scheme in Info.plist</span></span><br><span class="line">            <span class="string">"scope"</span>: <span class="string">"user repo:status"</span>,</span><br><span class="line">            <span class="string">"secret_in_body"</span>: <span class="literal">true</span>,    <span class="comment">// Github needs this</span></span><br><span class="line">            <span class="string">"keychain"</span>: <span class="literal">false</span>,         <span class="comment">// if you DON'T want keychain integration</span></span><br><span class="line">            ] <span class="keyword">as</span> <span class="type">OAuth2JSON</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> sessionManager = <span class="type">SessionManager</span>()</span><br><span class="line">        <span class="keyword">let</span> oauthHandler = <span class="type">OAuth2Handler</span>(oauth2: oauth2)</span><br><span class="line">        sessionManager.adapter = oauthHandler</span><br><span class="line">        sessionManager.retrier = oauthHandler</span><br><span class="line">        <span class="keyword">return</span> sessionManager</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>进而生成带 OAuth 的 provider：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="built_in">lazy</span> <span class="keyword">var</span> provider: <span class="type">MoyaProvider</span> = &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="type">MoyaProvider</span>&lt;<span class="type">API</span>&gt;(manager: <span class="keyword">self</span>.getManager(), plugins: [<span class="type">NetworkLoggerPlugin</span>()])</span><br><span class="line">    &#125;()</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用生成的 <code>provider</code>发送请求即可，此时 Moya 可自动处理 OAuth 认证信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-起源&quot;&gt;&lt;a href=&quot;#0-起源&quot; class=&quot;headerlink&quot; title=&quot;0. 起源&quot;&gt;&lt;/a&gt;0. 起源&lt;/h2&gt;&lt;p&gt;开放授权（OAuth）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>带参字符串国际化的一种写法</title>
    <link href="https://www.akringblog.com/2018/09/30/%E5%B8%A6%E5%8F%82%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>https://www.akringblog.com/2018/09/30/带参字符串国际化的一种写法/</id>
    <published>2018-09-30T00:20:31.000Z</published>
    <updated>2019-01-20T11:25:08.272Z</updated>
    
    <content type="html"><![CDATA[<p>最近在为Star Order做中文本地化，其中涉及到对含参字符串做本地化的需求，参考写法如下:</p><p>原句: <code>Are you sure to rename XXX</code></p><p>翻译句: <code>是否确定重命名 XXX</code></p><!--morew--><blockquote><p>XXX是一个字符串参数，用于接收传入的名称  </p></blockquote><p>代码如下:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *localizedString = <span class="built_in">NSLocalizedString</span>(<span class="string">@"Rename"</span>, <span class="literal">nil</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *title = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ '%@'"</span>,localizedString, 入参];</span><br></pre></td></tr></table></figure><p>简而言之，即将需要翻译的部分和参数部分分离即可.</p><blockquote><p>在编辑<code>Localizable.strings</code>文件的时候，需要注意格式问题，例如<code>&quot;Enter new tag name&quot; = &quot;输入新标签名&quot;;</code>结尾的那个<code>;</code>漏掉的话会导致整个<code>Localizable.strings</code>文件失效，进而导致APP中引用了<code>NSLocalizedString</code>的地方统统失效，需要特别小心  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在为Star Order做中文本地化，其中涉及到对含参字符串做本地化的需求，参考写法如下:&lt;/p&gt;
&lt;p&gt;原句: &lt;code&gt;Are you sure to rename XXX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;翻译句: &lt;code&gt;是否确定重命名 XXX&lt;/code&gt;&lt;/
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://www.akringblog.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Swift Lint 的配置和使用</title>
    <link href="https://www.akringblog.com/2018/07/20/Swift%20Lint%20%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.akringblog.com/2018/07/20/Swift Lint 的配置和使用/</id>
    <published>2018-07-20T08:20:31.000Z</published>
    <updated>2019-01-20T11:23:01.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>个人倾向于使用 Homebre 直接安装在 Mac 上，无需对每个项目的 Podfile 做改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install swiftlint</span><br></pre></td></tr></table></figure><!--morwe--><p>完成安装后，还需要在项目中添加一个 <code>Run Script</code>，使每次 Build 都会自动调用 Swift Lint 作代码扫描和校正。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> swiftlint &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">  swiftlint</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>以上脚本的 <code>else</code> 分支会在当前设备未安装/配置 Swift Lint 的时候在控制台输出提示  </p></blockquote><h2 id="二、Swift-Lint-配置"><a href="#二、Swift-Lint-配置" class="headerlink" title="二、Swift Lint 配置"></a>二、Swift Lint 配置</h2><p>项目中可能会使用<code>Cocoapods</code>或<code>Carthage</code>引入了第三方库，如果不对 Swift Lint 加以配置，则会导致这部分第三方库也被纳入到代码检查的范围，这是我们不期望看到的。同时，如果你正在维护一个历史久远，可能从 Swfit 2 时期就存在的项目的话，打开 Swift Lint 之后你将可能看到 <code>999+</code>个红色的编译错误。同时大量修改代码，并确保功能不出问题，这对任何人来说应该都是极大的负担，在这种情况下，我们可能会期望暂时禁用某些规则，如<code>force_cast</code>，以便在确保项目正常编译的同时，渐进式的完成 Swfit Lint 的修改工作，而这一切都必须依赖于自定义的 <code>.swiftlint.yml</code>配置文件。</p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>在项目根目录下创建一个<code>.swiftlint.yml</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .swiftlint.yml</span><br></pre></td></tr></table></figure><p>然后为其加入如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excluded:</span> <span class="comment"># 你所希望不要检索的路径,SwiftLint会无视掉该路径下的文件</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Carthage</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Pods</span></span><br></pre></td></tr></table></figure><p>即可方便的忽略掉通过<code>Cocoapods</code>或<code>Carthage</code>引入的第三方库，如果项目中还有其他不想要做 Swift Lint 代码检查的文件或目录，也照此办理即可。</p><h3 id="禁用规则"><a href="#禁用规则" class="headerlink" title="禁用规则"></a>禁用规则</h3><p>在<code>.swiftlint.yml</code>中加入如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disabled_rules:</span> <span class="comment"># 禁用指定的规则</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">force_try</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">force_cast</span></span><br></pre></td></tr></table></figure><p>即可禁用对应的规则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;p&gt;个人倾向于使用 Homebre 直接安装在 Mac 上，无需对每个项目的 Podfile 做改动&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中单例的正确写法</title>
    <link href="https://www.akringblog.com/2017/12/20/Swift%E4%B8%AD%E5%8D%95%E4%BE%8B%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/"/>
    <id>https://www.akringblog.com/2017/12/20/Swift中单例的正确写法/</id>
    <published>2017-12-20T08:20:31.000Z</published>
    <updated>2019-01-20T11:23:25.606Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoContex</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedInstance = <span class="type">UserInfoContex</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过设置初始化方法为私有，可以有效保证单例是真正唯一的，避免外部对象通过访问init方法创建单例类的其他实例。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Mac自定义标题栏响应双击Zoom的方法</title>
    <link href="https://www.akringblog.com/2017/02/08/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E9%A2%98%E6%A0%8F%E5%93%8D%E5%BA%94%E5%8F%8C%E5%87%BBZoom%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://www.akringblog.com/2017/02/08/Mac自定义标题栏响应双击Zoom的方法/</id>
    <published>2017-02-08T13:30:21.000Z</published>
    <updated>2019-01-20T11:19:22.867Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的博文中我们实现了类似Reminder的实现：<a href="http://akringblog.com/custom-mac-title-bar/" target="_blank" rel="noopener">《自定义Mac标题栏样式》</a></p><p>然而，使用以上方法实现自定义标题栏，会带来一个额外的副作用：双击Title bar无法再实现默认Window的Zoom效果，即无法自动缩放窗口到全屏效果。</p><!--morew--><p>发现这个问题后我测试了Mac自带的Reminder应用，发现同样具有这个问题，由此可见这也许是一个OS X的 Bug，或是一个人所未知的“feature”。Anyway， 为了解决这个问题，我使用了一个比较非主流的方式，记录如下。</p><h1 id="一、总体思路"><a href="#一、总体思路" class="headerlink" title="一、总体思路"></a>一、总体思路</h1><p>通过查看文档和Storyboard文件，作为First Responder的Window具有一个叫做<code>performZoom</code>的方法，而通过触发这个方法，Window就会执行缩放操作。<br>如此一来，问题的解决方案可以归为：</p><ol><li>响应双击事件</li><li>判定点击区域是否在title bar内</li><li>执行<code>performZoom</code>进行缩放</li></ol><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><h3 id="1-响应双击事件"><a href="#1-响应双击事件" class="headerlink" title="1. 响应双击事件"></a>1. 响应双击事件</h3><p>通过覆写<code>mouseDown(with event: NSEvent)</code>方法，检测鼠标点击事件，实现代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">mouseDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.clickCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//双击相关处理</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.mouseDown(with: event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-判定点击区域是否在title-bar内"><a href="#2-判定点击区域是否在title-bar内" class="headerlink" title="2. 判定点击区域是否在title bar内"></a>2. 判定点击区域是否在title bar内</h3><p>通过<code>event</code>检测鼠标点击的位置，并进一步通过<code>func convert(_ point: NSPoint, to view: NSView?) -&gt; NSPoint</code>方法将点击点映射到目的View上，从而检测是否点击到了所需的View上。代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> location = <span class="keyword">self</span>.view.convert(event.locationInWindow, to: statusBar)</span><br><span class="line">            <span class="keyword">if</span> (location.x &gt;= <span class="number">0</span> &amp;&amp; location.y &gt;= <span class="number">0</span>) &#123;<span class="comment">//即点击点位于statusBar内部</span></span><br><span class="line">                <span class="comment">//执行操作</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="3-执行performZoom进行缩放"><a href="#3-执行performZoom进行缩放" class="headerlink" title="3. 执行performZoom进行缩放"></a>3. 执行<code>performZoom</code>进行缩放</h3><p>执行Zoom操作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.view.window?.performZoom(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">override func mouseDown(with event: NSEvent) &#123;</span><br><span class="line">        if (event.clickCount &gt; 1) &#123;</span><br><span class="line">            //双击相关处理</span><br><span class="line">            let location = self.view.convert(event.locationInWindow, to: statusBar)</span><br><span class="line">            if (location.x &gt;= 0 &amp;&amp; location.y &gt;= 0) &#123;//即点击点位于statusBar内部</span><br><span class="line">                self.view.window?.performZoom(nil)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        else&#123;</span><br><span class="line">            super.mouseDown(with: event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三、相关思考"><a href="#三、相关思考" class="headerlink" title="三、相关思考"></a>三、相关思考</h3><p>其实一开始使用这样的方法我是拒绝的，因为怎么看都有一种 -钦定- 黑魔法的感觉。然而在有了比较多的Mac开发经历之后，我对此已经见怪不怪了。相比iOS， Mac开发总是需要subclass更多，hack更多。</p><p>除此之外，对知名应用Omnifocus的观察也让我觉得，这很可能是一条可行的路线，通过观察Omnifocus的行为，我发现其相应双击Zoom的响应区域更大，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://akring-blog-image.qiniudn.com/2017-04-16-093807.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>他的整个Tool Bar 和 Title Bar都可以响应双击事件，而根据我的解决方案，只需要将双击判定区域扩大到整个Tool Bar，即可轻松实现这个效果。再对比官方Reminders完全无法Zoom的行为，依然觉得Apple还得多加努力啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前的博文中我们实现了类似Reminder的实现：&lt;a href=&quot;http://akringblog.com/custom-mac-title-bar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《自定义Mac标题栏样式》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然
      
    
    </summary>
    
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
      <category term="Mac" scheme="https://www.akringblog.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>自定义Mac标题栏样式</title>
    <link href="https://www.akringblog.com/2017/01/22/%E8%87%AA%E5%AE%9A%E4%B9%89Mac%E6%A0%87%E9%A2%98%E6%A0%8F%E6%A0%B7%E5%BC%8F/"/>
    <id>https://www.akringblog.com/2017/01/22/自定义Mac标题栏样式/</id>
    <published>2017-01-22T03:30:21.000Z</published>
    <updated>2019-01-20T11:19:59.939Z</updated>
    
    <content type="html"><![CDATA[<p>与默认的Mac APP标题栏相比，类似Mac原生应用Reminder的标题栏具有更好的显示效果，标题栏和下方的Content View有效融合，整体风格能够保持一致。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://akring-blog-image.qiniudn.com/2017-04-16-083042.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>而要实现这种风格，我们只需要对当前NSWindow做如下处理：</p><!--morw--><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.titlebarAppearsTransparent = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>对于这个属性，Apple官方文档里是这样解释的：</p><blockquote><p>When the value of this property is true, the title bar does not draw its background, which allows all content underneath it to show through. It only makes sense to set this property to true when NSFullSizeContentViewWindowMask is also set.  </p></blockquote><p>当<code>titlebarAppearsTransparent</code>设为<code>true</code>的时候，title bar将不会绘制其背景，换而言之，title bar将会变成透明的，使其完全和下面的View融为一体。</p><p>与此同时，Apple还提到，将这个属性设置为true的同时，我们还需要设置Window<br>的<code>NSFullSizeContentViewWindowMask</code>，如以下代码所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.styleMask = [.fullSizeContentView]</span><br></pre></td></tr></table></figure><p>本文涉及的完整代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.title = <span class="string">"Star Order"</span></span><br><span class="line">        <span class="keyword">self</span>.styleMask = [.fullSizeContentView, .titled, .miniaturizable, .resizable, .closable]</span><br><span class="line">        <span class="keyword">self</span>.titlebarAppearsTransparent = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Utils</span>.positionWindowAtCenter(sender: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;与默认的Mac APP标题栏相比，类似Mac原生应用Reminder的标题栏具有更好的显示效果，标题栏和下方的Content View有效融合，整体风格能够保持一致。&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div
      
    
    </summary>
    
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
      <category term="Mac" scheme="https://www.akringblog.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iOS检测手机蜂窝网络制式</title>
    <link href="https://www.akringblog.com/2016/06/12/Mac%20OS%20%E4%B8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    <id>https://www.akringblog.com/2016/06/12/Mac OS 下字符串复制到剪贴板/</id>
    <published>2016-06-12T04:30:21.000Z</published>
    <updated>2019-01-20T11:17:45.858Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS 下字符串复制到剪贴板</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 复制Clone地址到剪贴板</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> - parameter sender:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">copyCloneAddressToPastBord</span><span class="params">(sender:NSButton)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> string = repoCloneLabel.stringValue</span><br><span class="line">    <span class="type">NSPasteboard</span>.generalPasteboard().declareTypes([<span class="type">NSStringPboardType</span>], owner: <span class="keyword">self</span>)</span><br><span class="line">    <span class="type">NSPasteboard</span>.generalPasteboard().setString(string, forType: <span class="type">NSStringPboardType</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac OS 下字符串复制到剪贴板&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Apple Watchkit（Glance部分）</title>
    <link href="https://www.akringblog.com/2016/04/08/Apple%20Watchkit%EF%BC%88Glance%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <id>https://www.akringblog.com/2016/04/08/Apple Watchkit（Glance部分）/</id>
    <published>2016-04-08T04:00:59.000Z</published>
    <updated>2019-01-20T11:08:37.643Z</updated>
    
    <content type="html"><![CDATA[<p>Glance在英语中的字面意思是（一瞥;一滑;闪光），由此可见在WatchKit的UI体系中，Glance担负的任务是为用户提供实时快捷，简单明了的信息获取窗口。对Watch app来说，Glance是可选项，开发者可以选择性的对其进行实现。</p><a id="more"></a><h3 id="一、特性"><a href="#一、特性" class="headerlink" title="一、特性"></a>一、特性</h3><ul><li>唯一性：一个APP只允许有一个Glance控制器</li><li>实时性：及时更新Glance，以避免Glance展示出过期信息</li><li>聚焦性：在Glance上永远都只展示最重要的数据</li><li>只读性：Glance是只读的，不能与用户操作进行交互</li><li>基于模板：Glance是基于模板设计的，且Glance的界面范围仅限于单个屏幕</li></ul><h3 id="二、生命周期"><a href="#二、生命周期" class="headerlink" title="二、生命周期"></a>二、生命周期</h3><p>　　Glance界面控制器的生命周期和其他WatchKit界面控制器类似，不过Glance的界面控制器的初始化要更早，以便于Glance能快速的显示给用户。为确保展示的信息是最新的，需要在willActivate方法中包含检查方法，以避免Glance展示出过时的信息。</p><p>　　在WatchKit的启动顺序链中，WatchKit会自动针对当前的场景创建适用的controller，如果用户正在查看弹出的Glance，则创建Glance关联的controller；如果用户直接启动watch app，则WatchKit会从storyboard中载入对应的初始化controller。<br>　　<br>　　以上controller均由一个<code>WKInterfaceController</code>的子类进行管理，以下是其关键方法：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>initWithContext:</td><td>controller初始化方法</td></tr><tr><td>willActivate</td><td>UI加载完毕后调用</td></tr><tr><td>didDeactivate</td><td>watch app运行完毕即将失效前调用</td></tr></tbody></table><blockquote><p>注意：一旦<code>willActivate</code>被调用，则controller中的所有属性操作都将变得不可用，因此不能在<code>willActivate</code>中进行属性设置。（使timer无效化或者停止动画之类的操作是可以的）  </p></blockquote><h3 id="三、Glance界面"><a href="#三、Glance界面" class="headerlink" title="三、Glance界面"></a>三、Glance界面</h3><h4 id="1-接入点"><a href="#1-接入点" class="headerlink" title="1.接入点"></a>1.接入点</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/WatchKitProgrammingGuide/Art/glance_interface.png" alt="EntryPoint" title="">                </div>                <div class="image-caption">EntryPoint</div>            </figure><p>　　与传统iOS App在stroyboard中的表现类似，在增加WatchKit的target，并包含Glance之后，storyboard将会为Glance准备好UI界面与接入点。</p><h4 id="2-Glance-Interface-Controller"><a href="#2-Glance-Interface-Controller" class="headerlink" title="2.Glance Interface Controller"></a>2.Glance Interface Controller</h4><p>Glance对应的Glance Interface Controller是<code>WKInterfaceController</code>的子类，其主要功能是为Glance配置布局，因此其实现也非常简单，主要包括以下两个方法：</p><ol><li><p><code>initWithContext</code>:用于初始化Glance</p></li><li><p><code>willActivate</code>:用于更新Glance的UI界面</p></li></ol><p>当需要改动已经展示在屏幕上的UI元素时，我们可以使用<code>NSTimer</code>对象，或使用WatchKit中新加入的如<code>WKInterfaceDat</code>和<code>WKInterfaceTimer</code>等对象来对时间和计时进行操作。</p><h4 id="3-自定义Glance启动界面"><a href="#3-自定义Glance启动界面" class="headerlink" title="3.自定义Glance启动界面"></a>3.自定义Glance启动界面</h4><p>在WatchKit中，当用户点击弹出的Glance时默认为打开Watch App并展示main interface controller管理的界面。我们可以在Glance的controller中调用<code>updateUserActivity:userInfo:</code>方法，自定义从Glance启动后Watch app展示的界面，方法如下：</p><ol><li>glance interface controller</li></ol><ul><li><p>实现<code>initWithContext:</code>和<code>willActivate</code>方法。</p></li><li><p>调用<code>updateUserActivity:userInfo:</code>方法，传入userInfo参数。</p></li></ul><ol start="2"><li>main interface controller</li></ol><ul><li>实现<code>actionForUserActivity:context:</code>方法，根据传入的userInfo参数展示对应的interface controller，生产一个comtex对象并把它传入interface controller。</li></ul><h4 id="4-其他注意事项"><a href="#4-其他注意事项" class="headerlink" title="4.其他注意事项"></a>4.其他注意事项</h4><ul><li>Glance底部区域是留给页面指示器圆点的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glance在英语中的字面意思是（一瞥;一滑;闪光），由此可见在WatchKit的UI体系中，Glance担负的任务是为用户提供实时快捷，简单明了的信息获取窗口。对Watch app来说，Glance是可选项，开发者可以选择性的对其进行实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Origami初步教程</title>
    <link href="https://www.akringblog.com/2016/03/28/Origami%E5%88%9D%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
    <id>https://www.akringblog.com/2016/03/28/Origami初步教程/</id>
    <published>2016-03-28T08:20:31.000Z</published>
    <updated>2019-01-20T11:21:54.458Z</updated>
    
    <content type="html"><![CDATA[<p>Origami是Facebook推出的，结合了自家POP动画引擎的原型交互设计套件，通过简单的拖拽和连线，即可创建出效果不错的动画。而Origami 2.0版本中引入的Code Export代码导出功能，对具体参与编码的工程师来说更是一大福音，从根本上解决了UX交互设计师设计的动画效果和软件工程师实现的效果不匹配的问题。</p><a id="more"></a><p>Origami的使用并不复杂，尤其是对于经常和Interface Builder（如XIB，Storyboard）打交道的iOS工程师来说更是容易上手，以下将用Origami实现一个简单的针对图片的旋转缩放效果，并演示如何将设计的效果移植到我们实际的工程中。</p><blockquote><p>重要提示：  </p></blockquote><blockquote><p>截止目前，我使用的Origami版本为2.0.2，这个版本中存在一个需要注意的问题，就是在设置动画的时候只有当你使用了<code>POPAnimation</code>组件，才可以顺利的完成Code Export代码导出，否则你将会得到一个空白的代码文件。  </p></blockquote><h2 id="一、搭建文件结构"><a href="#一、搭建文件结构" class="headerlink" title="一、搭建文件结构"></a>一、搭建文件结构</h2><h4 id="1-新建一个Origami文件"><a href="#1-新建一个Origami文件" class="headerlink" title="1. 新建一个Origami文件"></a>1. 新建一个Origami文件</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-%E6%96%B0%E5%BB%BAorigami.png" alt="新建菜单"></p><h4 id="2-新建的文件结构如图："><a href="#2-新建的文件结构如图：" class="headerlink" title="2. 新建的文件结构如图："></a>2. 新建的文件结构如图：</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-viewerSize.png" alt="文件结构"></p><p>左侧的Viewer Size用于控制预览器的外观，基本覆盖了iOS_Android_Windows Phone等平台，根据需要自行调整</p><h4 id="3-双击中部的Layer-Group进入内部，所有的动画配置都在这个部件中进行，初始的结构如图："><a href="#3-双击中部的Layer-Group进入内部，所有的动画配置都在这个部件中进行，初始的结构如图：" class="headerlink" title="3. 双击中部的Layer Group进入内部，所有的动画配置都在这个部件中进行，初始的结构如图："></a>3. 双击中部的Layer Group进入内部，所有的动画配置都在这个部件中进行，初始的结构如图：</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-layerGroup%E5%86%85%E6%99%AF.png" alt="初始"></p><h2 id="二、构建动画链"><a href="#二、构建动画链" class="headerlink" title="二、构建动画链"></a>二、构建动画链</h2><h4 id="1-从Library中选取Interaction2组件，拖动到主窗口："><a href="#1-从Library中选取Interaction2组件，拖动到主窗口：" class="headerlink" title="1. 从Library中选取Interaction2组件，拖动到主窗口："></a>1. 从Library中选取<code>Interaction2</code>组件，拖动到主窗口：</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-interaction2.png" alt="interaction2"></p><blockquote><p>Interaction2组件是Facebook自行封装的一个组件，用于模拟触摸屏上的点击，滑动等操作动作，是整个动画的入口。  </p></blockquote><h4 id="2-选取一张图片，拖动到主窗口，创建一个Image-Layer："><a href="#2-选取一张图片，拖动到主窗口，创建一个Image-Layer：" class="headerlink" title="2. 选取一张图片，拖动到主窗口，创建一个Image Layer："></a>2. 选取一张图片，拖动到主窗口，创建一个Image Layer：</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6.png" alt="image"></p><blockquote><p>这个Image Layer即为我们要执行动画的对象，可为它设置合适的长宽大小  </p></blockquote><h4 id="3-依次添加Switch组件，POPAnimation组件，两个Transition组件："><a href="#3-依次添加Switch组件，POPAnimation组件，两个Transition组件：" class="headerlink" title="3. 依次添加Switch组件，POPAnimation组件，两个Transition组件："></a>3. 依次添加<code>Switch</code>组件，<code>POPAnimation</code>组件，两个<code>Transition</code>组件：</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-%E6%B2%A1%E5%AE%8C%E6%88%90%E8%BF%9E%E7%BA%BF.png" alt="未连线"></p><ul><li style="list-style: none"><input type="checkbox"> <code>Switch</code>：即开关组件，用于控制条件的翻转，这里我们要用它来控制实现点击一下放大图片，再次点击缩小图片的效果。</li><li style="list-style: none"><input type="checkbox"> <code>POPAnimation</code>：Facebook自家出品的动画引擎，覆盖iOS和_Android_web（Android版的名称貌似是叫做Rebound）。通过这个组件可以实现很棒的弹性缩放动画。</li><li style="list-style: none"><input type="checkbox"> <code>Transition1</code>：控制动画效果的关键组件，这里我们通过设置这个组件的起止值，决定图片的缩放比值，旋转角度等参数。</li><li style="list-style: none"><input type="checkbox"> <code>Transition2</code>：控制动画效果的关键组件，这里我们通过设置这个组件的起止值，决定图片的缩放比值，旋转角度等参数。</li></ul><h4 id="4-为各组件添加连线："><a href="#4-为各组件添加连线：" class="headerlink" title="4. 为各组件添加连线："></a>4. 为各组件添加连线：</h4><p><img src="http://akring-blog-image.qiniudn.com/origami-%E5%AE%8C%E6%88%90%E8%BF%9E%E7%BA%BF.png" alt="已连线"></p><blockquote><p><code>Transition1</code>的连线关联到了图像组件的Z Rotation属性上，以达到控制图像旋转的目的<br><code>Transition2</code>的连线关联到了图像组件的Scale属性上，以达到控制图像缩放的目的</p></blockquote><h4 id="5-设置动画参数："><a href="#5-设置动画参数：" class="headerlink" title="5. 设置动画参数："></a>5. 设置动画参数：</h4><ul><li style="list-style: none"><input type="checkbox"> <code>POPAnimation</code>：选中该组件，在右侧的属性面板中修改动画的弹性和摩擦力参数，通过调整这两个值可以达到不同的动画效果，具体效果可以参见POP动画引擎的官方文档<a href="https://github.com/facebook/pop" target="_blank" rel="noopener">facebook/pop</a></li></ul><p><img src="http://akring-blog-image.qiniudn.com/origami-popAnimation%E9%85%8D%E7%BD%AE.png" alt="pop"></p><pre><code>- [ ] `Transition1`：选中该组件，在右侧的属性面板中修改动画的旋转角度，这里我们将它设置为360，即旋转一周。</code></pre><p><img src="http://akring-blog-image.qiniudn.com/origami-transition1%E9%85%8D%E7%BD%AE.png" alt="transiton1"></p><pre><code>- [ ] `Transition2`：选中该组件，在右侧的属性面板中修改动画的缩放比值，这里我们将它设置为2，即放大一倍。</code></pre><p><img src="http://akring-blog-image.qiniudn.com/origami-transition2%E9%85%8D%E7%BD%AE.png" alt="transition2"></p><p>至此，整个动画的构建就已经完成了，一起来看看动画效果：</p><p><img src="http://akring-blog-image.qiniudn.com/origami-%E5%8E%9F%E5%9E%8Bgif.gif" alt="此处输入图片的描述"></p><h2 id="三、导出代码并在实际工程中调用动画"><a href="#三、导出代码并在实际工程中调用动画" class="headerlink" title="三、导出代码并在实际工程中调用动画"></a>三、导出代码并在实际工程中调用动画</h2><h4 id="1-导出代码"><a href="#1-导出代码" class="headerlink" title="1. 导出代码"></a>1. 导出代码</h4><p>点击菜单里的纸鹤按钮，选择<code>Code Export</code>-<code>iOS</code>选项：</p><p><img src="http://akring-blog-image.qiniudn.com/origami-%E4%BB%A3%E7%A0%81%E5%AF%BC%E5%87%BA.png" alt="export"></p><p>Origami会生成一个包含动画代码的代码文件：</p><p><img src="http://akring-blog-image.qiniudn.com/origami-%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6.png" alt="code file"></p><h4 id="2-新建Xcode工程"><a href="#2-新建Xcode工程" class="headerlink" title="2. 新建Xcode工程"></a>2. 新建Xcode工程</h4><p>新建一个iOS项目，并简单配置：</p><p><img src="http://akring-blog-image.qiniudn.com/origami-xcode%E6%88%AA%E5%9B%BE.png" alt="xcode"></p><h4 id="3-引入POP动画引擎"><a href="#3-引入POP动画引擎" class="headerlink" title="3. 引入POP动画引擎"></a>3. 引入POP动画引擎</h4><p>建议使用Cocoapods来进行安装，简单快捷方便，当然如果受项目限制必须要手动引入的话，同样参考POP引擎的官方文档<a href="https://github.com/facebook/pop" target="_blank" rel="noopener">facebook/pop</a></p><p>Cocoapods的引入代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &quot;pop&quot;</span><br></pre></td></tr></table></figure><h4 id="4-调用动画"><a href="#4-调用动画" class="headerlink" title="4. 调用动画"></a>4. 调用动画</h4><p> 将导出的动画代码添加到项目中：</p><p> Opps!报错了：</p><p><img src="http://akring-blog-image.qiniudn.com/origami-%E5%87%BA%E9%94%99%E5%9B%BE.png" alt="此处输入图片的描述"> </p><p> 不要惊慌，把<code>self.layer.layer</code>替换成我们工程里要操作的控件即可：<code>self.imageView.layer</code></p><p> 最后，为imageView添加一个tap手势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> _tap = [[UITapGestureRecognizer alloc] initWithTarget:self</span><br><span class="line">                                                action:@selector(tapHandler)];</span><br><span class="line">    </span><br><span class="line">//开启imageView的用户交互选项，否则imageView不会响应手势</span><br><span class="line">self.imageView.userInteractionEnabled = YES;</span><br><span class="line">    </span><br><span class="line">[self.imageView addGestureRecognizer:_tap];</span><br></pre></td></tr></table></figure><p>以及响应手势的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)tapHandler&#123;</span><br><span class="line">    </span><br><span class="line">    if (scaled) &#123;//scaled为自己定义的判断缩放状态的BOOL参数</span><br><span class="line">        </span><br><span class="line">        [self togglePopAnimation:NO];</span><br><span class="line">        </span><br><span class="line">        scaled = !scaled;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        </span><br><span class="line">        [self togglePopAnimation:YES];</span><br><span class="line">        </span><br><span class="line">        scaled = !scaled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 来看看效果：</p><p> <img src="http://akring-blog-image.qiniudn.com/origami-%E6%88%90%E5%93%81gif.gif" alt="此处输入图片的描述"><br> 大功告成！</p><h3 id="代码及源文件下载："><a href="#代码及源文件下载：" class="headerlink" title="代码及源文件下载："></a>代码及源文件下载：</h3><p><a href="https://github.com/akring/OrigamiAnimationTest" target="_blank" rel="noopener">Xcode工程文件</a></p><p><a href="http://akring-blog-image.qiniudn.com/origami-test.qtz" target="_blank" rel="noopener">Origami源文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Origami是Facebook推出的，结合了自家POP动画引擎的原型交互设计套件，通过简单的拖拽和连线，即可创建出效果不错的动画。而Origami 2.0版本中引入的Code Export代码导出功能，对具体参与编码的工程师来说更是一大福音，从根本上解决了UX交互设计师设计的动画效果和软件工程师实现的效果不匹配的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="UI" scheme="https://www.akringblog.com/tags/UI/"/>
    
      <category term="UX" scheme="https://www.akringblog.com/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>3D Touch在Home Screen上的快捷菜单(一)</title>
    <link href="https://www.akringblog.com/2016/03/10/3D%20Touch%E5%9C%A8Home%20Screen%E4%B8%8A%E7%9A%84%E5%BF%AB%E6%8D%B7%E8%8F%9C%E5%8D%95(%E4%B8%80)/"/>
    <id>https://www.akringblog.com/2016/03/10/3D Touch在Home Screen上的快捷菜单(一)/</id>
    <published>2016-03-10T11:00:59.000Z</published>
    <updated>2019-01-20T11:06:40.542Z</updated>
    
    <content type="html"><![CDATA[<p>随着iOS9和iPhone 6s系列设备的发布，3D Touch为我们提供了一种新的交互方式。其中，通过Home Screen重压App图标来触发快捷菜单(Shortcut)的方式是非常实用的，它为用户提供了常用操作的快捷入口，能有效提升用户的使用体验。</p><a id="more"></a><p>生成快捷方式的方法有<code>静态生成</code>和<code>动态生成</code>两种，可以根据使用情景选择合适的方式来实现。</p><h3 id="生成静态快捷方式"><a href="#生成静态快捷方式" class="headerlink" title="生成静态快捷方式"></a>生成静态快捷方式</h3><ol><li><p>在<code>target</code>的<code>Info</code>标签中，创建一个<code>Array</code>类型的值<code>UIApplicationShortcutItems</code>。</p></li><li><p>在<code>UIApplicationShortcutItems</code>下创建类型为<code>Dictionary</code>的Item，每个Item都对应一个快捷键选项。</p></li><li><p>为Item创建三个键值对，分别为：</p><p><code>UIApplicationShortcutItemTitle</code>：<code>标题字符串</code><br><code>UIApplicationShortcutItemIconType</code>：<code>系统自带的图标类型</code><br><code>UIApplicationShortcutItemType</code>：<code>快捷键的标示符字符串</code></p><blockquote><p>如需自定义图标，则使用这个键值对:<code>UIApplicationShortcutItemIconFile</code>:<code>项目中的图片文件名</code></p></blockquote></li></ol><p>创建好的Item示例如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7bv8xb.com1.z0.glb.clouddn.com/3D-TouchQQ20151012-0@2x.png" alt="key" title="">                </div>                <div class="image-caption">key</div>            </figure></p><h3 id="配置快捷键的系统回调"><a href="#配置快捷键的系统回调" class="headerlink" title="配置快捷键的系统回调"></a>配置快捷键的系统回调</h3><p>用户点击快捷键之后，将在Appdelegate中触发<code>- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler</code>回调，从而使得我们可以针对触发的快捷键进行操作，示例代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application performActionForShortcutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))completionHandler&#123;</span><br><span class="line">   </span><br><span class="line">   completionHandler([<span class="keyword">self</span> handleShortCutItem:shortcutItem]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据苹果官方文档的建议，我们需要将快捷键的操作抽取成一个单独的方法，以便我们在<code>didFinishLaunchingWithOptions</code>和<code>performActionForShortcutItem</code>回调中解析快捷键操作，抽取出的解析方法如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  处理来自Home Screen的快捷键操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param shortcutItem 快捷键选项</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return Bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)handleShortCutItem:(<span class="built_in">UIApplicationShortcutItem</span> *)shortcutItem &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (shortcutItem == <span class="literal">nil</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//快捷键1</span></span><br><span class="line">      <span class="keyword">if</span> ([shortcutItem.type isEqualToString:<span class="string">@"xxx"</span>]) &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//执行快捷键1的操作</span></span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//快捷键2</span></span><br><span class="line">      <span class="keyword">if</span> ([shortcutItem.type isEqualToString:<span class="string">@"xxx"</span>]) &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//执行快捷键2的操作</span></span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//快捷键3</span></span><br><span class="line">      <span class="keyword">if</span> ([shortcutItem.type isEqualToString:<span class="string">@"xxx"</span>]) &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//执行快捷键3的操作</span></span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着iOS9和iPhone 6s系列设备的发布，3D Touch为我们提供了一种新的交互方式。其中，通过Home Screen重压App图标来触发快捷菜单(Shortcut)的方式是非常实用的，它为用户提供了常用操作的快捷入口，能有效提升用户的使用体验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>AutoLayout动态隐藏控件的方法</title>
    <link href="https://www.akringblog.com/2016/01/20/AutoLayout%E5%8A%A8%E6%80%81%E9%9A%90%E8%97%8F%E6%8E%A7%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://www.akringblog.com/2016/01/20/AutoLayout动态隐藏控件的方法/</id>
    <published>2016-01-20T05:00:29.000Z</published>
    <updated>2019-01-20T11:09:22.757Z</updated>
    
    <content type="html"><![CDATA[<p>使用AutoLayout有一段时间了，配合Xcode6新推出的size class做界面适配和自适应布局非常好用。目前网上有关AutoLayout的教程大都浅尝辄止，或者仅涉及到对设备的横、竖屏的动态布局等比较简单的应用，而对AutoLayout做动态界面相关的内容却非常少，因此结合日常工作中的一些经验，来为大家做一些分享。</p><a id="more"></a><h3 id="我们要做什么"><a href="#我们要做什么" class="headerlink" title="我们要做什么"></a>我们要做什么</h3><p>相信很多开发者都需要解决这样一系列问题：</p><ul><li>我们需要根据用户操作，或服务端返回的数据，而动态显示/隐藏一些控件，以达到灵活布局的效果。</li><li>我们需要根据需要调整某一控件的尺寸大小，位置信息，以输出最适宜的界面布局。</li></ul><p>面对类似高动态的界面实现时，以往我们的方法是通过代码来计算和判定控件的大小和位置，并结合控件的<code>hidden</code>,<code>frame</code>等属性对其进行设置，在实际使用中往往需要进行比较复杂的计算，比较繁琐。抛开代码党和xib党的争论，下面介绍一种使用AutoLayout实现动态界面的方法。</p><p><img src="http://akring-blog-image.qiniudn.com/Autolayout%E5%8A%A8%E6%80%81GifDemo.gif" alt="动态示例图"><br>如示例图所示，我们将要构建一个由三个控件构成的简易应用，通过底部的<code>show</code>和<code>hide</code>按钮，控制第二个组件<code>SecondObject</code>的显示和隐藏，并使得第三个控件根据情况自动布局。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>一、新建一个iOS项目，在storyboard中拖入三个UILabel控件，并为其设置合适的AutoLayout约束：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://akring-blog-image.qiniudn.com/Autolayout动态FirstStep.png" alt="第一步" title="">                </div>                <div class="image-caption">第一步</div>            </figure><p>二、 为需要操作的约束设置属性并关联到代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://akring-blog-image.qiniudn.com/Autolayout%E5%8A%A8%E6%80%81SecondStep.png" alt="第二步" title="">                </div>                <div class="image-caption">第二步</div>            </figure><blockquote><p>这里的两个约束分别是：  </p><ul><li><code>SecondObjectTopSpace</code>: <code>SecondObject</code>顶部到<code>FirstObject</code>的距离  </li><li><code>secondObjectHeight</code>:  <code>SecondObject</code>的高度  </li></ul></blockquote><p>三、 编写<code>show</code>和<code>hide</code>方法，为约束赋值，直接控制<code>SecondObject</code>的高度和距离’FirstObject’的顶部距离，从而达到完全隐藏/显示<code>SecondObject</code>的目的。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)show:(<span class="keyword">id</span>)sender&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.secondObjectHeight.constant = <span class="number">107</span>;</span><br><span class="line">    <span class="keyword">self</span>.SecondObjectTopSpace.constant = <span class="number">60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)hide:(<span class="keyword">id</span>)sender&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.secondObjectHeight.constant = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">self</span>.SecondObjectTopSpace.constant = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>示例代码下载：</p><p><a href="https://bitbucket.org/akring/autolayouttest" target="_blank" rel="noopener">AutoLayoutTest</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用AutoLayout有一段时间了，配合Xcode6新推出的size class做界面适配和自适应布局非常好用。目前网上有关AutoLayout的教程大都浅尝辄止，或者仅涉及到对设备的横、竖屏的动态布局等比较简单的应用，而对AutoLayout做动态界面相关的内容却非常少，因此结合日常工作中的一些经验，来为大家做一些分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://www.akringblog.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>QLPreviewController中文乱码的解决方法</title>
    <link href="https://www.akringblog.com/2015/12/28/QLPreviewController%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://www.akringblog.com/2015/12/28/QLPreviewController中文乱码的解决方法/</id>
    <published>2015-12-28T08:20:31.000Z</published>
    <updated>2019-01-20T11:21:58.841Z</updated>
    
    <content type="html"><![CDATA[<p>在使用QLPreviewController展示TXT等文档时，Windows下生成的UTF-8格式的文件会出现中文（以及其他特殊字符）乱码的问题，一开始以为是因为文档需要转码，在尝试多次无果后，在StackOverFlow上找到了答案，原答链接如下：<a href="http://stackoverflow.com/questions/9929892/qlpreviewcontroller-and-utf8-characters/13862066#13862066" target="_blank" rel="noopener">QLPreviewController and UTF8 characters</a></p><a id="more"></a><blockquote><p>解决要点在于  </p></blockquote><blockquote><ol><li>QLPreviewController只有在UTF16的编码下才能正确显示中文，因此我们需要在展示文件之前将文件的编码改为UTF16  </li><li>需针对ANSI编码和Unicode编码分别进行解码  </li></ol></blockquote><p>详细代码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span> &lt;QLPreviewItem&gt;)previewController: (QLPreviewController *)controller previewItemAtIndex:(<span class="built_in">NSInteger</span>)index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *filePath = _previewItem[<span class="string">@"filePath"</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *fileData = [<span class="built_in">NSData</span> dataWithContentsOfFile:filePath];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是UNICODE编码</span></span><br><span class="line">    <span class="built_in">NSString</span> *isUNICODE = [[<span class="built_in">NSString</span> alloc] initWithData:fileData</span><br><span class="line">                                                encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">//还是ANSI编码</span></span><br><span class="line">    <span class="built_in">NSString</span> *isANSI = [[<span class="built_in">NSString</span> alloc] initWithData:fileData</span><br><span class="line">                                             encoding:<span class="number">-2147482062</span>];</span><br><span class="line">    <span class="keyword">if</span> (isUNICODE) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *retStr = [[<span class="built_in">NSString</span> alloc]initWithCString:[isUNICODE UTF8String]</span><br><span class="line">                                                    encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSData</span> *data = [retStr dataUsingEncoding:<span class="built_in">NSUTF16StringEncoding</span>];</span><br><span class="line">        [data writeToFile:filePath atomically:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(isANSI)&#123;</span><br><span class="line">        <span class="built_in">NSData</span> *data = [isANSI dataUsingEncoding:<span class="built_in">NSUTF16StringEncoding</span>];</span><br><span class="line">        [data writeToFile:filePath atomically:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QLPreviewCustomItem *item = [[QLPreviewCustomItem alloc]initWithTitle:_previewItem[<span class="string">@"fileName"</span>]</span><br><span class="line">                                                                      url:[<span class="built_in">NSURL</span> fileURLWithPath:_previewItem[<span class="string">@"filePath"</span>]]];</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用QLPreviewController展示TXT等文档时，Windows下生成的UTF-8格式的文件会出现中文（以及其他特殊字符）乱码的问题，一开始以为是因为文档需要转码，在尝试多次无果后，在StackOverFlow上找到了答案，原答链接如下：&lt;a href=&quot;http://stackoverflow.com/questions/9929892/qlpreviewcontroller-and-utf8-characters/13862066#13862066&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QLPreviewController and UTF8 characters&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://www.akringblog.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>QLPreviewController自定义Title的方法</title>
    <link href="https://www.akringblog.com/2015/12/20/QLPreviewController%E8%87%AA%E5%AE%9A%E4%B9%89Title%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://www.akringblog.com/2015/12/20/QLPreviewController自定义Title的方法/</id>
    <published>2015-12-20T08:20:31.000Z</published>
    <updated>2019-01-20T11:22:29.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建自定义QLPreviewItem类"><a href="#一、创建自定义QLPreviewItem类" class="headerlink" title="一、创建自定义QLPreviewItem类"></a>一、创建自定义QLPreviewItem类</h3><a id="more"></a><ul><li>QLPreviewCustomItem.h</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;QuickLook/QuickLook.h&gt;</span><br><span class="line"></span><br><span class="line">@interface QLPreviewCustomItem : NSObject&lt;QLPreviewItem&gt;</span><br><span class="line"></span><br><span class="line">@property (readonly) NSString* previewItemTitle;</span><br><span class="line">@property (readonly) NSURL *previewItemURL;</span><br><span class="line"></span><br><span class="line">- (id) initWithTitle:(NSString*)title url:(NSURL*)url;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>QLPreviewCustomItem.m</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;QLPreviewCustomItem.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation QLPreviewCustomItem</span><br><span class="line"></span><br><span class="line">- (id) initWithTitle:(NSString*)title url:(NSURL*)url</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self != nil) &#123;</span><br><span class="line">        _previewItemTitle = title;</span><br><span class="line">        _previewItemURL   = url;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="二、QLPreviewController的DataSource"><a href="#二、QLPreviewController的DataSource" class="headerlink" title="二、QLPreviewController的DataSource"></a>二、QLPreviewController的DataSource</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (id &lt;QLPreviewItem&gt;)previewController: (QLPreviewController *)controller previewItemAtIndex:(NSInteger)index</span><br><span class="line">&#123;   </span><br><span class="line">    QLPreviewCustomItem *item = [[QLPreviewCustomItem alloc]initWithTitle:_previewItem[@&quot;fileName&quot;] url:[NSURL fileURLWithPath:_previewItem[@&quot;filePath&quot;]]];</span><br><span class="line">    </span><br><span class="line">    return item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、创建自定义QLPreviewItem类&quot;&gt;&lt;a href=&quot;#一、创建自定义QLPreviewItem类&quot; class=&quot;headerlink&quot; title=&quot;一、创建自定义QLPreviewItem类&quot;&gt;&lt;/a&gt;一、创建自定义QLPreviewItem类&lt;/h3&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://www.akringblog.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>POP框架开发浅析（一）</title>
    <link href="https://www.akringblog.com/2015/07/28/POP%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E6%B5%85%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.akringblog.com/2015/07/28/POP框架开发浅析（一）/</id>
    <published>2015-07-28T08:20:31.000Z</published>
    <updated>2019-01-20T11:21:18.609Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都比较纠结于iOS上的动画效果开发，平铺直叙的交互效果在当今扁平化遍地开花的年代显得太过苍白。私以为在扁平化设计中，动效和阴影的合理使用能够极大的提升APP的手感和吸引力，因此，学习iOS下的动画开发就显得非常有必要了。</p><a id="more"></a><h2 id="初识POP"><a href="#初识POP" class="headerlink" title="初识POP"></a>初识POP</h2><p>POP是由Facebook开源的一款动画引擎，曾被用于开发Facebook Paper，其特性可被概括为<strong>生动流畅，简单易用</strong>。通过POP引擎，我们可以为用户创造出逼真而充满物理效应的动效体验。</p><h3 id="安装与集成"><a href="#安装与集成" class="headerlink" title="安装与集成"></a>安装与集成</h3><p>POP可以通过Cocoapods或手动配置的方式集成到项目中，个人建议使用cocoapods的方式，其pod命令为：pod ‘pop’。未使用cocoapod的同学可以前往POP的<a href="https://github.com/facebook/pop" target="_blank" rel="noopener">Github页面</a>下载Zip压缩包后自行配置与集成。</p><h3 id="引入头文件"><a href="#引入头文件" class="headerlink" title="引入头文件"></a>引入头文件</h3><p>在项目中使用POP仅需引入POP.h头文件即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;pop/POP.h&gt;</span><br></pre></td></tr></table></figure></p><h2 id="动画类型"><a href="#动画类型" class="headerlink" title="动画类型"></a>动画类型</h2><p>POP默认提供两种动画类型——Spring和Decay，而在此基础上每种类型中又包含了多种动画模式。</p><h3 id="Spring-Animation-跳跃动画"><a href="#Spring-Animation-跳跃动画" class="headerlink" title="Spring Animation(跳跃动画)"></a>Spring Animation(跳跃动画)</h3><p>Spring单词的其中一个含义是弹簧，由此可见此类动画的主要特征就是像弹簧一般可以来回弹动，利用Spring Animation，我们可以创造出富有动感且符合物理规律的动画效果。<br>Spring Animation包含了以下5个主要参数；</p><ol><li>Bounciness(反弹)</li></ol><p>反弹主要影响动画所作用的参数的变化幅度，例如用作缩放动画时，可调节缩放的范围比例。</p><ol start="2"><li>Speed(速度)</li></ol><p>速度主要影响动画作用的时间，速度越慢，则动画从开始到结束所需的时间越长。</p><ol start="3"><li>Tension(拉力)</li></ol><p>拉力主要影响动画弹动的力度及速度，拉力越大则动画执行起来越干净利落，拉力越小则动画执行起来越和缓平滑，具体效果需自行调试后才能有直观的感受。</p><ol start="4"><li>Friction(摩擦力)</li></ol><p>摩擦力参数启用后，动画会不断重复，并且幅度逐渐削弱，直到停止，其效果类似于从桌上推落一只皮球，落地后不断弹起——落下，直至最终静止于地面的过程。摩擦力越大，则动画幅度削弱的越快，从开始到停止的时间也就越短。</p><ol start="5"><li>Mass(质量)</li></ol><p>质量会细微地影响动画的回弹力度和速度，在开启摩擦力参数时效果最为明显。</p><blockquote><p>各参数之间常会互相作用，建议大家都通过控制变量法，在demo上实际观察各项参数对动画效果的影响。</p></blockquote><h3 id="Decay-Animation-衰减动画"><a href="#Decay-Animation-衰减动画" class="headerlink" title="Decay Animation(衰减动画)"></a>Decay Animation(衰减动画)</h3><p>Decay Animation可以实现衰减的动画效果，其效果类似于汽车刹车，等同于物理概念中的匀变速运动。Decay Animation有一个非常重要的参数——velocity(速率)，其作用等同于物理匀变速运动公式中的加速度a。<br>例如：要创建一个物体移动的动画，那么我们可以为其X方向值设定初始值fromValue，然后设定速率velocity，则动画会从初始值以velocity的速率变化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都比较纠结于iOS上的动画效果开发，平铺直叙的交互效果在当今扁平化遍地开花的年代显得太过苍白。私以为在扁平化设计中，动效和阴影的合理使用能够极大的提升APP的手感和吸引力，因此，学习iOS下的动画开发就显得非常有必要了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://www.akringblog.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS检测手机蜂窝网络制式</title>
    <link href="https://www.akringblog.com/2015/05/11/iOS%E6%A3%80%E6%B5%8B%E6%89%8B%E6%9C%BA%E8%9C%82%E7%AA%9D%E7%BD%91%E7%BB%9C%E5%88%B6%E5%BC%8F/"/>
    <id>https://www.akringblog.com/2015/05/11/iOS检测手机蜂窝网络制式/</id>
    <published>2015-05-11T04:30:21.000Z</published>
    <updated>2019-01-20T11:17:05.832Z</updated>
    
    <content type="html"><![CDATA[<p>Reachability只能检测当前联网的方式，当Wifi开启的时候就无法获得当前蜂窝网络的连接制式，此方法目前仅使用于运营商项目，仅做记录和交流。</p><!--morew--><ol><li><p>导入<code>CoreTelephony.framework</code>框架</p></li><li><p>在文件中<code>import CoreTelephony</code></p></li><li><p>代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">checkNetWork</span><span class="params">(sender: AnyObject)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> networkInfo = <span class="type">CTTelephonyNetworkInfo</span>()</span><br><span class="line">        <span class="keyword">var</span> radioAccessStr = networkInfo.currentRadioAccessTechnology</span><br><span class="line">        <span class="keyword">if</span> (radioAccessStr?.characters.<span class="built_in">count</span>&gt;<span class="number">23</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = radioAccessStr?.startIndex.advancedBy(<span class="number">23</span>)</span><br><span class="line">            radioAccessStr = radioAccessStr!.substringFromIndex(index!)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(radioAccessStr!)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>输出值为:  </p></blockquote><blockquote><p><code>LTE</code>:4G网络  </p></blockquote><blockquote><p><code>HSDPA</code>:3G网络  </p></blockquote><blockquote><p><code>GSM</code>:2G网络（无设备未具体验证）  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Reachability只能检测当前联网的方式，当Wifi开启的时候就无法获得当前蜂窝网络的连接制式，此方法目前仅使用于运营商项目，仅做记录和交流。&lt;/p&gt;
&lt;!--morew--&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;导入&lt;code&gt;CoreTelephony.framework&lt;/
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://www.akringblog.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS企业版IPA发布与更新</title>
    <link href="https://www.akringblog.com/2015/03/08/iOS%E4%BC%81%E4%B8%9A%E7%89%88IPA%E5%8F%91%E5%B8%83%E4%B8%8E%E6%9B%B4%E6%96%B0/"/>
    <id>https://www.akringblog.com/2015/03/08/iOS企业版IPA发布与更新/</id>
    <published>2015-03-08T03:30:21.000Z</published>
    <updated>2019-01-20T11:16:31.373Z</updated>
    
    <content type="html"><![CDATA[<p>##发布</p><p>####打包<br>使用最新的Xcode打包IPA即可，导出时选择企业证书导出，不再赘述。</p><!--morew--><p>####生成Plist文件<br>Xcode6之后使用企业证书打包仅生成IPA文件，不再自动生成Plist文件，因此需要手工生成Plist，Plist文件主要用于后续的更新操作，其范例代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>ipa下载地址http://xxx.xxx.xxx/xxx.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>@2x应用图标地址，http://xxx.xxx.xxx/Icon@2x.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>应用图标地址，http://xxx.xxx.xxx/Icon.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>应用的Bundle ID，com.xxx.xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>应用版本,1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>应用名称，xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>##更新<br>因为企业版发布避开了AppStore的审核机制，所以可以随意的在应用内加上检测更新的按钮而不用担心审核被拒，通过比对Plist文件中<code>bundle-version</code>与本地<code>CFBundleShortVersionString</code>的值，即可做出更新判断，引导用户进行更新，代码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  检查系统更新</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param sender 检查更新按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)checkUpdate:(<span class="keyword">id</span>)sender&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//VersionPlistPath是你的Plist文件的位置，如http://xxx.xxx.xxx/xxx.plist</span></span><br><span class="line">    <span class="built_in">NSDictionary</span>* dict = [<span class="built_in">NSDictionary</span> dictionaryWithContentsOfURL:[<span class="built_in">NSURL</span> URLWithString:VersionPlistPath]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (dict) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSArray</span>* list = [dict objectForKey:<span class="string">@"items"</span>];</span><br><span class="line">        <span class="built_in">NSDictionary</span>* dict2 = [list objectAtIndex:<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSDictionary</span>* dict3 = [dict2 objectForKey:<span class="string">@"metadata"</span>];</span><br><span class="line">        <span class="built_in">NSString</span>* newVersion = [dict3 objectForKey:<span class="string">@"bundle-version"</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSDictionary</span> *infoDict = [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary];</span><br><span class="line">        <span class="built_in">NSString</span> *myVersion = [infoDict objectForKey:<span class="string">@"CFBundleShortVersionString"</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (![newVersion isEqualToString:myVersion]) &#123;</span><br><span class="line">            <span class="built_in">UIAlertView</span>* alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"提示"</span> message:<span class="string">@"有新版本"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"马上去更新"</span> otherButtonTitles:<span class="string">@"暂不更新"</span>, <span class="literal">nil</span>];</span><br><span class="line">            [alert show];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">UIAlertView</span> * aler = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"提示"</span> message:<span class="string">@"您已经是最新版"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"确定"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>];</span><br><span class="line">            [aler show];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">UIAlertView</span>* alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"提示"</span> message:<span class="string">@"请稍后再试"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"确定"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>];</span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>弹出的UIAlertView的代理方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UIAlertView Delegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (buttonIndex ==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//VersionDownloadPath是你的IPA文件的位置，如http://xxx.xxx.xxx/xxx.ipa</span></span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:VersionDownloadPath]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(buttonIndex ==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"不更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>iOS9中安装企业证书的信任机制有所改变，首次安装企业版APP时要到”设置”—“通用”—“描述文件”中找到对应的企业证书，然后手动选择信任选项，才能顺利安装企业版App  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##发布&lt;/p&gt;
&lt;p&gt;####打包&lt;br&gt;使用最新的Xcode打包IPA即可，导出时选择企业证书导出，不再赘述。&lt;/p&gt;
&lt;!--morew--&gt;
&lt;p&gt;####生成Plist文件&lt;br&gt;Xcode6之后使用企业证书打包仅生成IPA文件，不再自动生成Plist文件，因此需
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://www.akringblog.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://www.akringblog.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Flask文档读薄（二）</title>
    <link href="https://www.akringblog.com/2015/02/15/Flask%E6%96%87%E6%A1%A3%E8%AF%BB%E8%96%84%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.akringblog.com/2015/02/15/Flask文档读薄（二）/</id>
    <published>2015-02-15T05:20:21.000Z</published>
    <updated>2019-01-20T11:12:16.792Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要摘引自Flask文档的《快速入门》章节  </p></blockquote><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>默认情况下，路由只响应<code>GET</code>请求，通过给route()装饰器提供一个 <strong>methods</strong> 参数，即可让路由响应其他方法:</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时响应GET和POST方法</span></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 处理用户提交的登录信息表单</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 返回用户登录信息</span></span><br></pre></td></tr></table></figure><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>在包中或模块旁边创建一个名为<code>static</code>的文件夹，即可在应用中使用 <code>/static</code> 访问其中的静态资源，为静态文件生成URL时，使用特殊的<code>&#39;static&#39;</code>端点名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">'static'</span>,filename=<span class="string">"style.css"</span>)</span><br></pre></td></tr></table></figure><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><p>使用前需先导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><p>当前的请求方式通过<code>method</code>属性访问，表单数据通过<code>form</code>属性访问:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', methods=['POST', 'GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    error = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取并校验请求方法</span></span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">'username'</span>],</span><br><span class="line">                       request.form[<span class="string">'password'</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">'username'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">'无效的用户名或密码'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 处理GET方法</span></span><br></pre></td></tr></table></figure><blockquote><p>当<code>form</code>中的键值不存在时，会抛出一个<code>KeyError</code>，需捕获并做相应处理  </p></blockquote><p>通过<code>args</code>属性访问URL中包含提交的参数(?key=value):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">'q'</span>,<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要摘引自Flask文档的《快速入门》章节  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;HTTP方法&quot;&gt;&lt;a href=&quot;#HTTP方法&quot; class=&quot;headerlink&quot; title=&quot;HTTP方法&quot;&gt;&lt;/a&gt;HTTP方法&lt;/h3&gt;&lt;p&gt;默认情况下，路由只响应&lt;code&gt;GET&lt;/code&gt;请求，通过给route()装饰器提供一个 &lt;strong&gt;methods&lt;/strong&gt; 参数，即可让路由响应其他方法:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.akringblog.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Flask文档读簿（一）</title>
    <link href="https://www.akringblog.com/2015/02/10/Flask%E6%96%87%E6%A1%A3%E8%AF%BB%E7%B0%BF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.akringblog.com/2015/02/10/Flask文档读簿（一）/</id>
    <published>2015-02-10T02:00:29.000Z</published>
    <updated>2019-01-20T11:11:34.892Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要摘引自Flask文档的《快速入门》章节  </p></blockquote><h3 id="启用调试模式"><a href="#启用调试模式" class="headerlink" title="启用调试模式"></a>启用调试模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="多个地址Route的写法"><a href="#多个地址Route的写法" class="headerlink" title="多个地址Route的写法"></a>多个地址Route的写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index Page'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><h3 id="附加变量"><a href="#附加变量" class="headerlink" title="附加变量"></a>附加变量</h3><ul><li>附加原始变量：<code>&lt;variable_name&gt;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/user/&lt;username&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="comment"># 展示用户名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User %s'</span> % username</span><br></pre></td></tr></table></figure><ul><li>附加转换变量：<code>&lt;converter:variable_name&gt;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span><span class="params">(post_id)</span>:</span></span><br><span class="line">    <span class="comment"># 展示int类型的post_id</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Post %d'</span> % post_id</span><br></pre></td></tr></table></figure><h3 id="网址的唯一性"><a href="#网址的唯一性" class="headerlink" title="网址的唯一性"></a>网址的唯一性</h3><p>根据URL地址结尾是否带有<code>/</code>，可以分为以下两种情况：</p><ul><li>结尾带有<code>/</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/projects/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'The project page'</span></span><br></pre></td></tr></table></figure><p>在这种情况下，无论输入<code>xxx/projects/</code>还是<code>xxx/projects</code>，都能够正确访问到projects页面，而不用担心404错误    </p><ul><li>结尾不带<code>/</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/about')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'The about page"</span></span><br></pre></td></tr></table></figure><p>在这种情况下，访问<code>xxx/about</code>没有问题，而访问<code>xxx/about/</code>就会报404</p><h3 id="构建URL"><a href="#构建URL" class="headerlink" title="构建URL"></a>构建URL</h3><p>使用<code>url_for()</code>函数来构造URL：</p><p><strong>函数格式：<code>url_for(&#39;函数名&#39;, 参数)</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/profile')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(username)</span>:</span> </span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> url_for(<span class="string">'profile'</span>, username=<span class="string">'John Doe'</span>)</span><br><span class="line"><span class="comment"># 输出/user/John%20Doe</span></span><br></pre></td></tr></table></figure><p>动态构建URL的好处：</p><ol><li>比硬编码更具备描述性</li><li>允许你一次性修改 URL，而不是到处去找 URL 做修改。</li><li>URL 构建会显式地处理特殊字符和 Unicode 数据的转义</li><li>如果应用不位于 URL 的根路径，url_for() 会为你妥善地处理这些。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要摘引自Flask文档的《快速入门》章节  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;启用调试模式&quot;&gt;&lt;a href=&quot;#启用调试模式&quot; class=&quot;headerlink&quot; title=&quot;启用调试模式&quot;&gt;&lt;/a&gt;启用调试模式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.run(debug=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.akringblog.com/tags/Python/"/>
    
  </entry>
  
</feed>
